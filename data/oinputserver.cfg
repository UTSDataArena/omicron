config:
{
	serverPort = "28000"; // Listening port for Omicron clients
	
	showEventStream = false;		// Show outgoing UDP events
	showEventMessages = false;	// Show outgoing TCP events
	
	services:
	{
		/*
		MSKinectService:
		{
			checkInterval = 2.0;
			seatedMode = false;
			debug = false;
			
			// Generates a head and wand mocap event similar to the CAVE2 tracker
			// Will not accurately track orientation or Z movement
			caveSimulator = false;
			
			// Speech recognition
			enableKinectSpeech = false;
			speechGrammerFilePath = "C:/Workspace/EVL/Kinect/Samples v2.0/SpeechBasics-D2D/SpeechBasics-D2D.grxml";
		};
		
		*/
		
		NetService:
		{
			serverIP: "131.193.76.71";
			msgPort = 28000;
			dataPort = 7805;
			debug = true;
			
			// Stream data to serverIP on dataPort instead of receiving (Default: false)
			dataStreamOut = false;
			
			// Delay in ms between connection attempts to serverIP (Default: 5000)
			reconnectDelay = 5000;
		};
		/*
		
		// Motion capture system
		VRPNService:
		{
			updateInterval = 0.01;
			serverIP = "cave2tracker.evl.uic.edu"; // This is the IP of all trackable objects below, unless marked otherwise
			debug = false;
			objects:
			{
				Controller_1:
				{
					name = "Head_Tracker";
					objectID = 0;
					userId = 0;
				};

				Controller_2:
				{
					name = "Wand_Batman";
					objectID = 1;
					userId = 0;
				};			
			};
		};
		*/
		/*
		// Combine game controller with motion capture object
		WandService:
		{
			controllerService = "XInputService";
			controllerSourceId = 0;
			raySourceId = 0;
			debug = false;
			pointer:
			{
				type = "rectangular";
				topLeft = [4.1021, -2.4130, 2.4892];
				bottomLeft = [4.1021, -2.4130, 0.1778];
				bottomRight = [-4.1021, -2.4130, 0.1778];
				topRight = [-4.1021, -2.4130, 2.4892];
			};
		};
		
		WandService1:
		{
			class = "WandService";
			controllerService = "XInputService";
			controllerSourceId = 1;
			raySourceId = 1;
			debug = false;
			pointer:
			{
				type = "rectangular";
				topLeft = [4.1021, -2.4130, 2.4892];
				bottomLeft = [4.1021, -2.4130, 0.1778];
				bottomRight = [-4.1021, -2.4130, 0.1778];
				topRight = [-4.1021, -2.4130, 2.4892];
			};
		};
		
		
		*/
	};
};
